interface IA {
    interface IB : IA {
        interface IC : IA, IB {}
    }
    interface ID : IB::IC {}
    
    func imethod(a: IA, b: IB, c: IB::IC) -> ID;
}

class A : IA, IA::IB, IA::IB::ID {
    public class B(A) {
        public class C(A) : IA::ID {}
    }
    public class D(B::C) {}
    
    public func cmethod(a: A, b: B, c: B::C) -> D {}
    
    public var cvar: A;
}

func function(a: A, b: A::B, c: A::B::C) -> A::D {
    class Nested {}
    {
        class BlockNested(A) {
            protected var a: int;
        }
    }
    {
        class BlockNested2 : IA::ID {}
    }
    var test: func(int,int)->void = func(a: int, b: int) -> void {
        class LambdaClass : IA::IB {}
    };
}

var variable: IA::IB::IC;
